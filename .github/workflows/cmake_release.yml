name: Release
run-name: ${{ github.actor }} is compiling new things! üöÄ
on: [push, pull_request]

env:
  BUILD_DIR: build
  BUILD_TYPE: Release
  CMAKE_VERSION: 3.20.0

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
    - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
    - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

    - name: Clean workspace
      run: |
        echo "Cleaning up previous run"
        rm -rf "${{ github.workspace }}"
        mkdir -p "${{ github.workspace }}"

    - name: Check out repository code
      uses: actions/checkout@v4
      with:
        path: telem-in-a-box

    - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
    - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."

    - name: Cache Submodules
      uses: actions/cache@v4
      with:
        path: |
          ${{github.workspace}}/telem-in-a-box/include
        key: ${{ runner.os }}-submodules-${{ hashFiles('**/.gitmodules') }}
        restore-keys: |
          ${{ runner.os }}-submodules-

    - name: Checkout submodules
      if: steps.cache-submodules.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/telem-in-a-box
      run: git submodule update --init --recursive

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      working-directory: ${{github.workspace}}/telem-in-a-box
      run:  cmake -E make_directory ${{github.workspace}}/telem-in-a-box/build

    - name: Install Dependencies
      run: sudo apt-get install -y cmake gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/telem-in-a-box/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: PICO_SDK_PATH=${{github.workspace}}/telem-in-a-box/include/pico-sdk cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Get core count
      id: core_count
      run : cat /proc/cpuinfo  | grep processor | wc -l

    - name: Build
      working-directory: ${{github.workspace}}/telem-in-a-box/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE --parallel $(nproc)

    - run: echo "üçè This job's status is ${{ job.status }}."
